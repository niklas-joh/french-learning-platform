graph TD
    subgraph "Frontend (React + TypeScript)"
        direction TB

        subgraph "State & API Management"
            AuthContext["AuthContext (User, Token, Auth Status)"]
            ApiService["Central API Service (Axios with Interceptors)"]
            useLearningPath["useLearningPath Hook (State for Lessons)"]
            AuthContext --> ApiService
            ApiService --> AuthContext
        end

        subgraph "Core App Screens (Mobile First)"
            direction LR
            HomePage(Home)
            LessonsPage(Lessons)
            PracticePage(Practice)
            ProgressPage(Progress)
            ProfilePage(Profile)
        end

        subgraph "UI Components"
            MainLayout["MainLayout (Mobile Frame)"]
            BottomNav["BottomTabNavigation"]
            LearningPath["LearningPath.tsx"]
            LearningUnit["LearningUnit.tsx"]
            LessonNode["LessonNode.tsx"]
            
            subgraph "Dynamic Lesson Content"
                direction TB
                LessonPage["LessonPage.tsx (Controller)"]
                DynamicContent["DynamicLessonContent.tsx"]
                Suspense["React.Suspense (Loading Boundary)"]
                VocabularyLesson["VocabularyLesson.tsx"]
                GrammarLesson["GrammarLesson.tsx"]
                ConversationLesson["ConversationLesson.tsx"]
                
                LessonPage --> DynamicContent
                DynamicContent --> Suspense
                Suspense --> VocabularyLesson
                Suspense --> GrammarLesson
                Suspense --> ConversationLesson
            end
        end

        MainLayout --> BottomNav
        MainLayout --> HomePage
        MainLayout --> LessonsPage
        MainLayout --> PracticePage
        MainLayout --> ProgressPage
        MainLayout --> ProfilePage
        
        LessonsPage --> LearningPath
        LearningPath --> LearningUnit
        LearningUnit --> LessonNode
        
        AuthContext -- "Provides auth state" --> MainLayout
        useLearningPath -- "Fetches data via" --> ApiService
        LessonNode -- "Navigates to" --> LessonPage
    end

    subgraph "Backend API (Node.js + Express)"
        direction TB

        ApiGateway["/api/v1"]

        subgraph "Routes"
            UserRoutes["user.routes.ts"]
            LearningRoutes["learning.routes.ts"]
            MetaRoutes["meta.routes.ts"]
            AuthRoutes["auth.routes.ts"]
            AdminRoutes["admin.routes.ts"]
            AIRoutes["ai.routes.ts"]
        end

        subgraph "Controllers"
            UserController["user.controller.ts"]
            ProgressController["progress.controller.ts"]
            GamificationController["gamification.controller.ts"]
            LearningPathController["learningPath.controller.ts"]
            AIController["ai.controller.ts"]
            SpeechController["speech.controller.ts"]
        end

        subgraph "Services"
            ProgressService["progress.service.ts"]
            LearningPathService["learningPath.service.ts"]
            GamificationService["gamification.service.ts (placeholder)"]
            SpeechService["speech.service.ts (placeholder)"]
        end

        subgraph "AI Services Layer"
            direction TB
            AIOrchestrator["AIOrchestrator"]

            subgraph "Content Generation Engine"
                direction TB
                DynamicContentGenerator["DynamicContentGenerator"]
                
                subgraph "Strategy Pattern Services"
                    direction LR
                    ContentValidatorFactory["ContentValidatorFactory"]
                    ContentEnhancerFactory["ContentEnhancerFactory"]
                    ContentTemplateManager["ContentTemplateManager"]
                end

                subgraph "Content Validators"
                    direction LR
                    LessonValidator["LessonValidator"]
                    VocabularyValidator["VocabularyDrillValidator"]
                    GrammarValidator["GrammarExerciseValidator"]
                    CulturalValidator["CulturalContentValidator"]
                end

                subgraph "Content Enhancers"
                    direction LR
                    LessonEnhancer["LessonEnhancer"]
                    VocabularyEnhancer["VocabularyDrillEnhancer"]
                    GrammarEnhancer["GrammarExerciseEnhancer"]
                    CulturalEnhancer["CulturalContentEnhancer"]
                end
            end
            
            subgraph "Supporting AI Services"
                direction LR
                CacheService["CacheService"]
                RateLimitService["RateLimitService"]
                FallbackHandler["FallbackHandler"]
                ContextService["ContextService"]
                AIMetricsService["AIMetricsService"]
                PromptTemplateEngine["PromptTemplateEngine"]
            end
            
            AIController --> AIOrchestrator
            AIController --> DynamicContentGenerator
            AIOrchestrator --> CacheService
            AIOrchestrator --> RateLimitService
            AIOrchestrator --> FallbackHandler
            AIOrchestrator --> ContextService
            
            DynamicContentGenerator --> AIOrchestrator
            DynamicContentGenerator --> ContentValidatorFactory
            DynamicContentGenerator --> ContentEnhancerFactory
            DynamicContentGenerator --> ContentTemplateManager
            DynamicContentGenerator --> PromptTemplateEngine
            
            ContentValidatorFactory --> LessonValidator
            ContentValidatorFactory --> VocabularyValidator
            ContentValidatorFactory --> GrammarValidator
            ContentValidatorFactory --> CulturalValidator
            
            ContentEnhancerFactory --> LessonEnhancer
            ContentEnhancerFactory --> VocabularyEnhancer
            ContentEnhancerFactory --> GrammarEnhancer
            ContentEnhancerFactory --> CulturalEnhancer
        end
        
        ApiGateway --> AuthRoutes
        ApiGateway --> UserRoutes
        ApiGateway --> LearningRoutes
        ApiGateway --> MetaRoutes
        ApiGateway --> AdminRoutes
        ApiGateway --> AIRoutes

        UserRoutes --> UserController
        UserRoutes --> ProgressController
        UserRoutes --> GamificationController
        
        LearningRoutes --> LearningPathController
        LearningRoutes --> AIController
        LearningRoutes --> SpeechController

        AIRoutes --> AIController

        MetaRoutes --> GamificationController

        ProgressController --> ProgressService
        GamificationController --> GamificationService
        LearningPathController --> LearningPathService
        SpeechController --> SpeechService
    end

    subgraph "Data & External Services"
        direction TB
        Database["Database (Postgres + Knex)"]
        Redis["Redis (Caching, Rate Limiting)"]
        OpenAI["OpenAI API"]
        
        CacheService --> Redis
        RateLimitService --> Redis
        ContextService --> Database
        AIOrchestrator --> OpenAI
        DynamicContentGenerator --> Database
    end

    subgraph "External Services & Deployment"
        GitHub["GitHub Repository"]
        Vercel["Vercel Hosting"]
        AI_Tutor["AI Tutor Service (Future)"]
        
        GitHub -- "CI/CD" --> Vercel
        Vercel -- "Serves" --> Frontend
    end

    ApiService -- "Makes calls to" --> ApiGateway
